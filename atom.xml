<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wyx.dev</title>
  
  
  <link href="http://wyx.dev/atom.xml" rel="self"/>
  
  <link href="http://wyx.dev/"/>
  <updated>2021-04-13T02:48:42.697Z</updated>
  <id>http://wyx.dev/</id>
  
  <author>
    <name>Wei Yuxuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES2016+ 新特性索引</title>
    <link href="http://wyx.dev/2021/01/18/es2016-plus/"/>
    <id>http://wyx.dev/2021/01/18/es2016-plus/</id>
    <published>2021-01-17T16:00:00.000Z</published>
    <updated>2021-04-13T02:48:42.697Z</updated>
    
    <content type="html"><![CDATA[<p>从 ES2015 起，ECMAScript 的标准在每年的 6 月份都会正式发布一次作为当年的正式版本。而一种新的语法从提案到变成正式标准，需要经历五个阶段。每个阶段的变动都需要由 TC39 委员会批准。</p><ul><li>Stage 0 - Strawman（展示阶段）</li><li>Stage 1 - Proposal（征求意见阶段）</li><li>Stage 2 - Draft（草案阶段）</li><li>Stage 3 - Candidate（候选人阶段）</li><li>Stage 4 - Finished（定案阶段）</li></ul><p>一个提案如果能进入 Stage 2，就差不多肯定会包括在以后的正式标准里面。而一个提案如果在当年 6 月之前进入 Stage 4，那么就会在 6 月份正式发布。</p><p>这里梳理一下 ES2016 及更高版本的新特性，以供速览。</p><h2 id="ES2016"><a href="#ES2016" class="headerlink" title="ES2016"></a>ES2016</h2><h4 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h4><p>判断一个数组是否包含一个指定的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;d&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].includes(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>); <span class="comment">// false 第二个参数代表起始索引</span></span><br></pre></td></tr></table></figure><h4 id="求幂运算符"><a href="#求幂运算符" class="headerlink" title="求幂运算符 **"></a>求幂运算符 <code>**</code></h4><p>取代以前的求幂方法 <code>Math.pow()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.pow(<span class="number">4</span>, <span class="number">2</span>) === <span class="number">4</span> ** <span class="number">2</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">10</span> === <span class="number">1024</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="ES2017"><a href="#ES2017" class="headerlink" title="ES2017"></a>ES2017</h2><h4 id="String-prototype-padStart-String-prototype-padEnd"><a href="#String-prototype-padStart-String-prototype-padEnd" class="headerlink" title="String.prototype.padStart() / String.prototype.padEnd()"></a>String.prototype.padStart() / String.prototype.padEnd()</h4><p>给字符串填充字符来达到指定长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>);           <span class="comment">// &#x27;       abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">10</span>, <span class="string">&#x27;foo&#x27;</span>);    <span class="comment">// &#x27;foofoofabc&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">6</span>, <span class="string">&#x27;123465&#x27;</span>);  <span class="comment">// &#x27;123abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">8</span>, <span class="string">&#x27;0&#x27;</span>);       <span class="comment">// &#x27;00000abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">1</span>);            <span class="comment">// &#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values() / Object.entries()"></a>Object.values() / Object.entries()</h4><p>获取对象的值数组和键值对数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.values(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Object</span>.entries(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;); <span class="comment">// [[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]]</span></span><br></pre></td></tr></table></figure><h4 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h4><p>返回一个对象上自有属性的属性描述符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123; <span class="attr">bar</span>: <span class="string">&#x27;hello&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(foo, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   configurable: true</span></span><br><span class="line"><span class="comment">//   enumerable: true</span></span><br><span class="line"><span class="comment">//   value: &quot;hello&quot;</span></span><br><span class="line"><span class="comment">//   writable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h4 id="尾部逗号"><a href="#尾部逗号" class="headerlink" title="尾部逗号"></a>尾部逗号</h4><p>在定义或者调用函数时添加尾部逗号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doSomething = <span class="function">(<span class="params">var1, var2,</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething(<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>,)</span><br></pre></td></tr></table></figure><h4 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h4><p>异步终极解决方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> api.getTableData(); <span class="comment">// await api</span></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SharedArrayBuffer-Atomics"><a href="#SharedArrayBuffer-Atomics" class="headerlink" title="SharedArrayBuffer / Atomics"></a>SharedArrayBuffer / Atomics</h4><p>增强多线程能力</p><h2 id="ES2018"><a href="#ES2018" class="headerlink" title="ES2018"></a>ES2018</h2><h4 id="对象的-Rest-Spread-属性"><a href="#对象的-Rest-Spread-属性" class="headerlink" title="对象的 Rest/Spread 属性"></a>对象的 Rest/Spread 属性</h4><p>扩展运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 2</span></span><br><span class="line">z; <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br><span class="line"><span class="keyword">let</span> n = &#123; x, y, ...z &#125;;</span><br><span class="line">n; <span class="comment">// &#123; x: 1, y: 2, a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="异步循环"><a href="#异步循环" class="headerlink" title="异步循环"></a>异步循环</h4><p>新的 for-await-of 语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> line <span class="keyword">of</span> readLines(filePath)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h4><p>无论结果是 fulfilled 或者是 rejected，在执行 then() 和 catch() 后，都会执行finally 指定的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;file.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.json())</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error))</span><br><span class="line">  .finally(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;finished&#x27;</span>))</span><br></pre></td></tr></table></figure><h4 id="正则表达式优化"><a href="#正则表达式优化" class="headerlink" title="正则表达式优化"></a>正则表达式优化</h4><ul><li>正则表达式反向断言</li><li>正则表达式命名捕获组</li><li>正则表达式新转义符 <code>\p</code> <code>\P</code></li><li>正则表达式 /s 使元字符 <code>.</code> 能匹配包括换行符在内所有字符模式</li></ul>]]></content>
    
    
    <summary type="html">从 ES2015 起，ECMAScript 的标准在每年的 6 月份都会正式发布一次作为当年的正式版本。</summary>
    
    
    
    
    <category term="前端" scheme="http://wyx.dev/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="http://wyx.dev/tags/JavaScript/"/>
    
  </entry>
  
</feed>
